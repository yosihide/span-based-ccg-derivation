(declaim (optimize (speed 3) (space 0) (compilation-speed 0)))

(in-package :cl-user)

(defpackage :span-based-ccg-derivation.misc
  (:use :cl
	:cl-ppcre)
  (:export :merge-word_deps-and-stagged))

(in-package :span-based-ccg-derivation.misc)

(defvar +eos+ (gensym))

(defun skip-comments (in)
  (loop :repeat 3 :do (read-line in))
  t)

(defun read-deps (in &optional acc)
  (let ((line (read-line in nil +eos+)))
    (cond
      ((eq line +eos+)
       +eos+)
      ((string= line "")
       (nreverse acc))
      (t
       (read-deps in (cons line acc))))))

(defun merge-word_deps-and-stagged (dep stag out)
  (with-open-file (dstrm dep)
    (with-open-file (sstrm stag)
      (with-open-file (ostrm out :direction :output)
	(format ostrm "# this file was generated by the following command(s):~%")
	(format ostrm "# (merge-word_deps-and-stagged ~a ~a ~a)~%~%" dep stag out)
	(skip-comments dstrm)
	(skip-comments sstrm)
	(loop
	   :for ds := (read-deps dstrm)
	   :for stag := (read-line sstrm nil +eos+)
	   :until (and (eq ds +eos+) (eq stag +eos+))
	   :do
	     (cond
	       ((or (eq ds +eos+) (eq stag +eos+))
		(error "error in merge-word_deps-and-staged."))
	       (t
		(dolist (l ds)
		  (write-line l ostrm))
		(format ostrm "<c> ~a~%~%" stag)))))))
  t)
